{"version":3,"mappings":"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","names":["QUESTION_TYPES","DEFAULT_WEIGHTS","randomInt","min","max","randomChoice","array","selectByWeight","weights","entries","totalWeight","sum","_","weight","random","type","formatNumber","num","getExactAnswer","generateMultiplication","decimalShiftRange","a","b","shiftA","shiftB","displayA","displayB","answer","generatePercentage","percentage","base","shift","displayBase","generatePercentageChange","isIncrease","baseShift","multiplier","getRandomQuestion","options","GameSession","questionObj","userAnswer","responseTime","numericAnswer","isCorrect","result","totalQuestions","correctAnswers","q","accuracy","averageTime","questionsByType","accuracyByType","correct","total","sessionDuration","n","windowSize","recentAccuracy","olderQuestions","olderAccuracy","trend","data","gameSession","UIController","doc","missingElements","id","correctAnswer","stats","element","newValue","streak","streakElement","isActive","el","message","event","handler","originalBg","canStart","canReset","summary","shortcuts","HighScores","storageKey","saved","error","duration","score","scoreData","entry","rank","s","scores","lowestScore","_a","playerName","name","best","dur","highScores","SPRINT_DURATIONS","SPRINT_STATES","SprintMode","wasRunning","timeElapsed","questionRecord","elapsed","totalSeconds","minutes","seconds","totalTime","avgTimePerQuestion","sprintMode","SprintController","uiController","results","statsSection","progress","isHighScore","index","li","MathFluencyGame","e","sprintBtn","cancelBtn","btn","playAgainBtn","closeResultsBtn","playerNameInput","clearScoresBtn","question","nextQ","finalStats","initGame","demoScript","game","__vitePreload","highScores$1"],"ignoreList":[],"sources":["../../src/questionGenerator.js","../../src/gameSession.js","../../src/ui.js","../../src/highScores.js","../../src/sprintMode.js","../../src/sprintController.js","../../src/main.js"],"sourcesContent":["// Question Generator Module\n// Pure functions for generating math practice questions\n\n// Constants\nexport const QUESTION_TYPES = {\n  BASIC: 'basic',\n  DECIMAL: 'decimal',\n  PERCENTAGE: 'percentage',\n  PERCENTAGE_CHANGE: 'percentage_change'\n};\n\nexport const DEFAULT_WEIGHTS = {\n  basic: 0.35,\n  decimal: 0.30,\n  percentage: 0.20,\n  percentage_change: 0.15\n};\n\n// Utility functions\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction randomChoice(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction selectByWeight(weights) {\n  const entries = Object.entries(weights);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  let random = Math.random() * totalWeight;\n\n  for (const [type, weight] of entries) {\n    random -= weight;\n    if (random <= 0) return type;\n  }\n\n  return entries[entries.length - 1][0];\n}\n\n// Number formatting for display (questions)\nexport function formatNumber(num) {\n  // For display purposes, remove trailing zeros\n  // But don't round - preserve exact value\n  if (Number.isInteger(num)) {\n    return num.toString();\n  }\n\n  // Convert to string and remove unnecessary trailing zeros\n  // parseFloat automatically removes trailing zeros\n  return parseFloat(num.toPrecision(12)).toString();\n}\n\n// Get exact answer without any rounding\nexport function getExactAnswer(num) {\n  // Use toPrecision to handle floating point properly\n  // Then parseFloat to remove trailing zeros\n  return parseFloat(num.toPrecision(12));\n}\n\n// Main generator functions\n\n/**\n * Generate multiplication question with optional decimal shifts\n * @param {Array} decimalShiftRange - [min, max] range for decimal shifts\n * @returns {Object} Question object with question, answer, type, and metadata\n */\nexport function generateMultiplication(decimalShiftRange = [0, 0]) {\n  // Get base numbers from 1-13 multiplication table\n  const a = randomInt(1, 13);\n  const b = randomInt(1, 13);\n\n  // Apply random decimal shifts\n  const shiftA = randomInt(decimalShiftRange[0], decimalShiftRange[1]);\n  const shiftB = randomInt(decimalShiftRange[0], decimalShiftRange[1]);\n\n  // Calculate display values\n  const displayA = a * Math.pow(10, shiftA);\n  const displayB = b * Math.pow(10, shiftB);\n\n  // Calculate answer\n  const answer = displayA * displayB;\n\n  return {\n    question: `${formatNumber(displayA)} × ${formatNumber(displayB)}`,\n    answer: getExactAnswer(answer),\n    type: (shiftA === 0 && shiftB === 0) ? QUESTION_TYPES.BASIC : QUESTION_TYPES.DECIMAL,\n    metadata: {\n      base: [a, b],\n      shifts: [shiftA, shiftB],\n      operation: 'multiply'\n    }\n  };\n}\n\n/**\n * Generate percentage question: \"What is X% of Y?\"\n * @param {Array} decimalShiftRange - Optional scaling for base number\n * @returns {Object} Question object\n */\nexport function generatePercentage(decimalShiftRange = [0, 1]) {\n  // Only use percentages that keep multiplication within 13×13 table\n  const safePercentages = [\n    // Direct multiplication (1-13)\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n    // Multiples of 10 (can be computed as (n/10) × base)\n    20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130\n  ];\n\n  const percentage = randomChoice(safePercentages);\n\n  // Get base number with optional shift\n  const base = randomInt(1, 13);\n  const shift = randomInt(decimalShiftRange[0], decimalShiftRange[1]);\n  const displayBase = base * Math.pow(10, shift);\n\n  // Calculate answer\n  const answer = (percentage / 100) * displayBase;\n\n  return {\n    question: `What is ${formatNumber(percentage)}% of ${formatNumber(displayBase)}?`,\n    answer: getExactAnswer(answer),\n    type: QUESTION_TYPES.PERCENTAGE,\n    metadata: {\n      percentage: percentage,\n      base: base,\n      shift: shift,\n      operation: 'percentage'\n    }\n  };\n}\n\n/**\n * Generate percentage change question: \"What is X% more/less than Y?\"\n * @returns {Object} Question object\n */\nexport function generatePercentageChange() {\n  const isIncrease = Math.random() < 0.5;\n\n  let percentage;\n  if (isIncrease) {\n    // For increase: only 10, 20, or 30 (to stay within 13×13 table)\n    percentage = randomChoice([10, 20, 30]);\n  } else {\n    // For decrease: any multiple of 10 from 10 to 90\n    percentage = randomInt(1, 9) * 10;\n  }\n\n  // Get base number with optional scaling\n  const base = randomInt(1, 13);\n  const baseShift = Math.random() < 0.5 ? 0 : 1; // Sometimes scale by 10\n  const displayBase = base * Math.pow(10, baseShift);\n\n  // Calculate multiplier and answer\n  const multiplier = isIncrease\n    ? (1 + percentage / 100)\n    : (1 - percentage / 100);\n\n  const answer = displayBase * multiplier;\n\n  return {\n    question: `What is ${percentage}% ${isIncrease ? 'more' : 'less'} than ${formatNumber(displayBase)}?`,\n    answer: getExactAnswer(answer),\n    type: QUESTION_TYPES.PERCENTAGE_CHANGE,\n    metadata: {\n      base: base,\n      shift: baseShift,\n      percentage: percentage,\n      isIncrease: isIncrease,\n      operation: 'percentage_change'\n    }\n  };\n}\n\n/**\n * Get a random question based on weighted distribution\n * @param {Object} options - Configuration options\n * @returns {Object} Random question object\n */\nexport function getRandomQuestion(options = {}) {\n  const {\n    weights = DEFAULT_WEIGHTS,\n    decimalShiftRange = [-2, 2]\n  } = options;\n\n  const type = selectByWeight(weights);\n\n  switch(type) {\n    case 'basic':\n      return generateMultiplication([0, 0]);\n    case 'decimal':\n      return generateMultiplication(decimalShiftRange);\n    case 'percentage':\n      return generatePercentage();\n    case 'percentage_change':\n      return generatePercentageChange();\n    default:\n      return generateMultiplication([0, 0]);\n  }\n}","// Game Session State Management\n// Tracks timing, answers, accuracy, and statistics\n\nexport class GameSession {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.questions = [];        // Array of question records\n    this.currentQuestion = null;\n    this.questionStartTime = null;\n    this.sessionStartTime = null;\n    this.currentStreak = 0;\n    this.bestStreak = 0;\n    this.isActive = false;\n    this.isPausedState = false;\n  }\n\n  // Start the session\n  start() {\n    this.reset();\n    this.isActive = true;\n    this.sessionStartTime = Date.now();\n  }\n\n  // Start timing a new question\n  startQuestion(questionObj) {\n    if (!this.isActive) {\n      this.start();\n    }\n\n    this.currentQuestion = {\n      ...questionObj,\n      startTime: Date.now(),\n      userAnswer: null,\n      isCorrect: null,\n      responseTime: null\n    };\n    this.questionStartTime = Date.now();\n  }\n\n  // Submit an answer for the current question\n  submitAnswer(userAnswer) {\n    if (!this.currentQuestion) {\n      throw new Error('No question is currently active');\n    }\n\n    const responseTime = Date.now() - this.questionStartTime;\n    const numericAnswer = parseFloat(userAnswer);\n\n    // Check if answer is correct (with small tolerance for floating point)\n    const isCorrect = Math.abs(numericAnswer - this.currentQuestion.answer) < 0.01;\n\n    // Update current question record\n    this.currentQuestion.userAnswer = numericAnswer;\n    this.currentQuestion.isCorrect = isCorrect;\n    this.currentQuestion.responseTime = responseTime;\n\n    // Add to questions history\n    this.questions.push({\n      ...this.currentQuestion\n    });\n\n    // Update streak\n    if (isCorrect) {\n      this.currentStreak++;\n      this.bestStreak = Math.max(this.bestStreak, this.currentStreak);\n    } else {\n      this.currentStreak = 0;\n    }\n\n    // Clear current question\n    const result = {\n      isCorrect,\n      correctAnswer: this.currentQuestion.answer,\n      responseTime\n    };\n\n    this.currentQuestion = null;\n    this.questionStartTime = null;\n\n    return result;\n  }\n\n  // Get current statistics\n  getStatistics() {\n    const totalQuestions = this.questions.length;\n\n    if (totalQuestions === 0) {\n      return {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        accuracy: 0,\n        averageTime: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        sessionDuration: 0,\n        questionsByType: {},\n        accuracyByType: {}\n      };\n    }\n\n    const correctAnswers = this.questions.filter(q => q.isCorrect).length;\n    const accuracy = (correctAnswers / totalQuestions) * 100;\n\n    // Calculate average response time (only for answered questions)\n    const totalTime = this.questions.reduce((sum, q) => sum + q.responseTime, 0);\n    const averageTime = totalTime / totalQuestions;\n\n    // Calculate statistics by question type\n    const questionsByType = {};\n    const accuracyByType = {};\n\n    this.questions.forEach(q => {\n      if (!questionsByType[q.type]) {\n        questionsByType[q.type] = 0;\n        accuracyByType[q.type] = { correct: 0, total: 0 };\n      }\n      questionsByType[q.type]++;\n      accuracyByType[q.type].total++;\n      if (q.isCorrect) {\n        accuracyByType[q.type].correct++;\n      }\n    });\n\n    // Convert accuracy by type to percentages\n    Object.keys(accuracyByType).forEach(type => {\n      const { correct, total } = accuracyByType[type];\n      accuracyByType[type] = total > 0 ? (correct / total) * 100 : 0;\n    });\n\n    const sessionDuration = this.sessionStartTime\n      ? Date.now() - this.sessionStartTime\n      : 0;\n\n    return {\n      totalQuestions,\n      correctAnswers,\n      accuracy: Math.round(accuracy * 10) / 10, // Round to 1 decimal\n      averageTime: Math.round(averageTime / 100) / 10, // Convert to seconds, 1 decimal\n      currentStreak: this.currentStreak,\n      bestStreak: this.bestStreak,\n      sessionDuration,\n      questionsByType,\n      accuracyByType\n    };\n  }\n\n  // Get detailed history\n  getHistory() {\n    return [...this.questions];\n  }\n\n  // Get the last N questions\n  getRecentQuestions(n = 5) {\n    return this.questions.slice(-n);\n  }\n\n  // Check if a session is currently active\n  isSessionActive() {\n    return this.isActive;\n  }\n\n  // Pause the session\n  pause() {\n    if (this.isActive) {\n      this.isPausedState = true;\n    }\n  }\n\n  // Resume the session\n  resume() {\n    if (this.isActive && this.isPausedState) {\n      this.isPausedState = false;\n    }\n  }\n\n  // Check if paused\n  isPaused() {\n    return this.isPausedState;\n  }\n\n  // End the session\n  end() {\n    this.isActive = false;\n    this.isPausedState = false;\n    return this.getStatistics();\n  }\n\n  // Get performance trends (for last N questions)\n  getPerformanceTrend(windowSize = 10) {\n    if (this.questions.length < windowSize) {\n      return null;\n    }\n\n    const recentQuestions = this.questions.slice(-windowSize);\n    const recentAccuracy = (recentQuestions.filter(q => q.isCorrect).length / windowSize) * 100;\n\n    const olderQuestions = this.questions.slice(-windowSize * 2, -windowSize);\n    if (olderQuestions.length < windowSize) {\n      return { trend: 'stable', recentAccuracy };\n    }\n\n    const olderAccuracy = (olderQuestions.filter(q => q.isCorrect).length / windowSize) * 100;\n\n    let trend = 'stable';\n    if (recentAccuracy > olderAccuracy + 10) {\n      trend = 'improving';\n    } else if (recentAccuracy < olderAccuracy - 10) {\n      trend = 'declining';\n    }\n\n    return {\n      trend,\n      recentAccuracy: Math.round(recentAccuracy),\n      olderAccuracy: Math.round(olderAccuracy)\n    };\n  }\n\n  // Export session data (for potential save/load feature)\n  exportData() {\n    return {\n      questions: this.questions,\n      currentStreak: this.currentStreak,\n      bestStreak: this.bestStreak,\n      sessionStartTime: this.sessionStartTime,\n      isActive: this.isActive\n    };\n  }\n\n  // Import session data\n  importData(data) {\n    this.questions = data.questions || [];\n    this.currentStreak = data.currentStreak || 0;\n    this.bestStreak = data.bestStreak || 0;\n    this.sessionStartTime = data.sessionStartTime || null;\n    this.isActive = data.isActive || false;\n    this.currentQuestion = null;\n    this.questionStartTime = null;\n  }\n}\n\n// Create and export a singleton instance\nexport const gameSession = new GameSession();","// UI Controller Module\n// Handles all DOM interactions and visual updates\n\nexport class UIController {\n  constructor() {\n    this.initializeElements();\n    this.feedbackTimeout = null;\n  }\n\n  initializeElements() {\n    // Use globalThis to work in both browser and Node.js test environments\n    const doc = (typeof document !== 'undefined') ? document : globalThis.document;\n\n    if (!doc) {\n      console.warn('Document not available for UIController');\n      return;\n    }\n\n    // Question display\n    this.questionText = doc.getElementById('questionText');\n    this.questionDisplay = doc.getElementById('questionDisplay');\n\n    // Answer input\n    this.answerInput = doc.getElementById('answerInput');\n    this.feedback = doc.getElementById('feedback');\n\n    // Statistics\n    this.questionsCount = doc.getElementById('questionsCount');\n    this.accuracyRate = doc.getElementById('accuracyRate');\n    this.avgTime = doc.getElementById('avgTime');\n    this.currentStreak = doc.getElementById('currentStreak');\n\n    // Controls\n    this.startBtn = doc.getElementById('startBtn');\n    this.resetBtn = doc.getElementById('resetBtn');\n\n    // Verify all elements exist\n    const requiredElements = [\n      'questionText', 'answerInput', 'feedback',\n      'questionsCount', 'accuracyRate', 'avgTime', 'currentStreak',\n      'startBtn', 'resetBtn'\n    ];\n\n    const missingElements = requiredElements.filter(id => !doc.getElementById(id));\n    if (missingElements.length > 0) {\n      console.error('Missing required elements:', missingElements);\n    }\n  }\n\n  // Display a new question\n  displayQuestion(questionObj) {\n    if (!questionObj || !questionObj.question) {\n      console.error('Invalid question object:', questionObj);\n      return;\n    }\n\n    this.questionText.textContent = questionObj.question;\n    this.answerInput.value = '';\n    this.answerInput.disabled = false;\n    this.answerInput.focus();\n    // Don't clear feedback immediately - let it fade naturally\n    // this.clearFeedback();\n  }\n\n  // Show feedback for answer\n  showFeedback(isCorrect, correctAnswer = null) {\n    // Clear any existing timeout\n    if (this.feedbackTimeout) {\n      clearTimeout(this.feedbackTimeout);\n    }\n\n    // Remove all feedback classes first\n    this.feedback.className = 'feedback';\n\n    if (isCorrect) {\n      this.feedback.textContent = '✓ Correct!';\n      this.feedback.classList.add('feedback-correct');\n\n      // Pulse animation on question display\n      this.questionDisplay.classList.add('pulse');\n      setTimeout(() => {\n        this.questionDisplay.classList.remove('pulse');\n      }, 600);\n    } else {\n      this.feedback.textContent = `✗ Incorrect. Answer: ${correctAnswer}`;\n      this.feedback.classList.add('feedback-incorrect');\n\n      // Shake animation on answer input\n      this.answerInput.classList.add('shake');\n      setTimeout(() => {\n        this.answerInput.classList.remove('shake');\n      }, 300);\n    }\n\n    // Auto-clear feedback after delay (stays visible while answering next question)\n    this.feedbackTimeout = setTimeout(() => {\n      this.clearFeedback();\n    }, isCorrect ? 4000 : 5000);\n  }\n\n  // Clear feedback display\n  clearFeedback() {\n    this.feedback.textContent = '';\n    this.feedback.className = 'feedback';\n    if (this.feedbackTimeout) {\n      clearTimeout(this.feedbackTimeout);\n      this.feedbackTimeout = null;\n    }\n  }\n\n  // Update statistics display\n  updateStatistics(stats) {\n    if (!stats) return;\n\n    // Update each stat with animation\n    this.animateValue(this.questionsCount, stats.totalQuestions);\n    this.animateValue(this.accuracyRate, `${stats.accuracy}%`);\n    this.animateValue(this.avgTime, `${stats.averageTime}s`);\n    this.animateValue(this.currentStreak, stats.currentStreak);\n\n    // Special effect for streak milestones\n    if (stats.currentStreak > 0 && stats.currentStreak % 5 === 0) {\n      this.celebrateStreak(stats.currentStreak);\n    }\n  }\n\n  // Animate value changes\n  animateValue(element, newValue) {\n    const currentValue = element.textContent;\n    if (currentValue !== newValue.toString()) {\n      element.style.transform = 'scale(1.2)';\n      element.textContent = newValue;\n      setTimeout(() => {\n        element.style.transform = 'scale(1)';\n      }, 200);\n    }\n  }\n\n  // Celebrate streak milestones\n  celebrateStreak(streak) {\n    const streakElement = this.currentStreak.parentElement;\n    streakElement.classList.add('pulse');\n\n    // Show temporary celebration message\n    const originalText = this.feedback.textContent;\n    if (!originalText) {\n      this.feedback.textContent = `🔥 ${streak} streak!`;\n      this.feedback.className = 'feedback feedback-correct';\n      setTimeout(() => {\n        if (this.feedback.textContent === `🔥 ${streak} streak!`) {\n          this.clearFeedback();\n        }\n      }, 2000);\n    }\n\n    setTimeout(() => {\n      streakElement.classList.remove('pulse');\n    }, 600);\n  }\n\n  // Enable/disable game controls\n  setGameActive(isActive) {\n    if (isActive) {\n      this.startBtn.textContent = 'Next Question';\n      this.startBtn.classList.add('btn-active');\n      this.answerInput.disabled = false;\n      this.resetBtn.disabled = false;\n    } else {\n      this.startBtn.textContent = 'Start Practice';\n      this.startBtn.classList.remove('btn-active');\n      this.answerInput.disabled = true;\n      this.answerInput.value = '';\n      this.questionText.textContent = 'Press Start to begin!';\n      this.clearFeedback();\n    }\n  }\n\n  // Reset UI to initial state\n  reset() {\n    this.setGameActive(false);\n    this.clearFeedback();\n\n    // Reset statistics display\n    this.questionsCount.textContent = '0';\n    this.accuracyRate.textContent = '--%';\n    this.avgTime.textContent = '--s';\n    this.currentStreak.textContent = '0';\n\n    // Clear any animations\n    const animated = document.querySelectorAll('.pulse, .shake');\n    animated.forEach(el => {\n      el.classList.remove('pulse', 'shake');\n    });\n  }\n\n  // Get user's answer\n  getAnswer() {\n    return this.answerInput ? this.answerInput.value.trim() : '';\n  }\n\n  // Clear answer input\n  clearAnswer() {\n    if (this.answerInput) {\n      this.answerInput.value = '';\n      this.answerInput.focus();\n    }\n  }\n\n  // Show loading state\n  showLoading() {\n    if (this.questionText) {\n      this.questionText.classList.add('loading');\n      this.questionText.textContent = '';\n    }\n  }\n\n  // Hide loading state\n  hideLoading() {\n    if (this.questionText) {\n      this.questionText.classList.remove('loading');\n    }\n  }\n\n  // Display error message\n  showError(message) {\n    this.feedback.textContent = `⚠️ ${message}`;\n    this.feedback.className = 'feedback feedback-incorrect';\n  }\n\n  // Add event listener helper\n  on(element, event, handler) {\n    if (element) {\n      element.addEventListener(event, handler);\n    }\n  }\n\n  // Remove event listener helper\n  off(element, event, handler) {\n    if (element) {\n      element.removeEventListener(event, handler);\n    }\n  }\n\n  // Focus answer input\n  focusAnswer() {\n    if (this.answerInput) {\n      this.answerInput.focus();\n      this.answerInput.select();\n    }\n  }\n\n  // Check if answer input is focused\n  isAnswerFocused() {\n    return document.activeElement === this.answerInput;\n  }\n\n  // Flash an element (for attention)\n  flash(element) {\n    if (!element) return;\n\n    element.style.transition = 'background-color 0.3s';\n    const originalBg = element.style.backgroundColor;\n    element.style.backgroundColor = 'var(--primary-light)';\n\n    setTimeout(() => {\n      element.style.backgroundColor = originalBg;\n    }, 300);\n  }\n\n  // Update button states\n  updateButtonStates(canStart, canReset) {\n    this.startBtn.disabled = !canStart;\n    this.resetBtn.disabled = !canReset;\n  }\n\n  // Show session summary\n  showSessionSummary(stats) {\n    const summary = `\n      Session Complete!\n      Questions: ${stats.totalQuestions}\n      Accuracy: ${stats.accuracy}%\n      Best Streak: ${stats.bestStreak}\n      Avg Time: ${stats.averageTime}s\n    `;\n\n    if (this.questionText) {\n      this.questionText.textContent = summary.trim();\n    }\n    this.setGameActive(false);\n  }\n\n  // Handle keyboard shortcuts display\n  showKeyboardShortcuts() {\n    const shortcuts = `\n      Keyboard Shortcuts:\n      Enter - Submit answer / Next question\n      Escape - Reset session\n      Space - Start/Next (when input not focused)\n    `;\n\n    this.feedback.textContent = shortcuts.trim();\n    this.feedback.className = 'feedback';\n  }\n}\n\n// Export only the class, not a singleton instance\n// This prevents issues with DOM access before it's ready (especially in tests)\n// main.js will create its own instance when needed","// High Scores Module\n// Manages local leaderboards and high score tracking for Sprint Mode\n\nexport class HighScores {\n  constructor(storageKey = 'mathFluencyHighScores') {\n    this.storageKey = storageKey;\n    this.maxScoresPerDuration = 10;\n    this.loadScores();\n  }\n\n  loadScores() {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      this.scores = saved ? JSON.parse(saved) : this.getEmptyScores();\n      this.validateScores();\n    } catch (error) {\n      console.error('Failed to load high scores:', error);\n      this.scores = this.getEmptyScores();\n    }\n  }\n\n  getEmptyScores() {\n    return {\n      '1min': [],\n      '2min': [],\n      '3min': [],\n      '5min': []\n    };\n  }\n\n  validateScores() {\n    const durations = ['1min', '2min', '3min', '5min'];\n    \n    durations.forEach(duration => {\n      if (!Array.isArray(this.scores[duration])) {\n        this.scores[duration] = [];\n      }\n      \n      // Ensure each score has required fields\n      this.scores[duration] = this.scores[duration].filter(score => \n        score && \n        typeof score.name === 'string' &&\n        typeof score.score === 'number' &&\n        typeof score.questionsAnswered === 'number' &&\n        typeof score.accuracy === 'number' &&\n        score.date\n      );\n      \n      // Sort and limit\n      this.scores[duration].sort((a, b) => b.score - a.score);\n      this.scores[duration] = this.scores[duration].slice(0, this.maxScoresPerDuration);\n    });\n  }\n\n  saveScores() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.scores));\n      return true;\n    } catch (error) {\n      console.error('Failed to save high scores:', error);\n      return false;\n    }\n  }\n\n  addScore(duration, scoreData) {\n    // Validate duration\n    if (!['1min', '2min', '3min', '5min'].includes(duration)) {\n      throw new Error(`Invalid duration: ${duration}`);\n    }\n\n    // Validate score data\n    if (!scoreData.name || typeof scoreData.name !== 'string') {\n      throw new Error('Invalid name');\n    }\n    if (typeof scoreData.score !== 'number' || scoreData.score < 0) {\n      throw new Error('Invalid score');\n    }\n    if (typeof scoreData.questionsAnswered !== 'number' || scoreData.questionsAnswered < 0) {\n      throw new Error('Invalid questionsAnswered');\n    }\n    if (typeof scoreData.accuracy !== 'number' || scoreData.accuracy < 0 || scoreData.accuracy > 100) {\n      throw new Error('Invalid accuracy');\n    }\n\n    // Create score entry\n    const entry = {\n      name: scoreData.name.trim(),\n      score: Math.round(scoreData.score),\n      questionsAnswered: scoreData.questionsAnswered,\n      accuracy: Math.round(scoreData.accuracy * 10) / 10, // Round to 1 decimal\n      date: new Date().toISOString(),\n      avgTimePerQuestion: scoreData.avgTimePerQuestion || 0\n    };\n\n    // Add to scores\n    this.scores[duration].push(entry);\n    \n    // Sort by score (descending)\n    this.scores[duration].sort((a, b) => b.score - a.score);\n    \n    // Keep only top scores\n    this.scores[duration] = this.scores[duration].slice(0, this.maxScoresPerDuration);\n    \n    // Save to localStorage\n    this.saveScores();\n    \n    // Return rank (1-based) or null if didn't make the board\n    const rank = this.scores[duration].findIndex(s => \n      s.name === entry.name && \n      s.score === entry.score && \n      s.date === entry.date\n    );\n    \n    return rank >= 0 ? rank + 1 : null;\n  }\n\n  getScores(duration) {\n    if (!['1min', '2min', '3min', '5min'].includes(duration)) {\n      throw new Error(`Invalid duration: ${duration}`);\n    }\n    // Return deep copy to prevent modification\n    return this.scores[duration].map(score => ({ ...score }));\n  }\n\n  getAllScores() {\n    return {\n      '1min': this.scores['1min'].map(s => ({ ...s })),\n      '2min': this.scores['2min'].map(s => ({ ...s })),\n      '3min': this.scores['3min'].map(s => ({ ...s })),\n      '5min': this.scores['5min'].map(s => ({ ...s }))\n    };\n  }\n\n  isHighScore(duration, score) {\n    if (!['1min', '2min', '3min', '5min'].includes(duration)) {\n      return false;\n    }\n    \n    const scores = this.scores[duration];\n    \n    // If less than max scores, it's a high score\n    if (scores.length < this.maxScoresPerDuration) {\n      return true;\n    }\n    \n    // Check if score beats the lowest score\n    const lowestScore = scores[scores.length - 1]?.score || 0;\n    return score > lowestScore;\n  }\n\n  clearScores(duration = null) {\n    if (duration) {\n      if (!['1min', '2min', '3min', '5min'].includes(duration)) {\n        throw new Error(`Invalid duration: ${duration}`);\n      }\n      this.scores[duration] = [];\n    } else {\n      this.scores = this.getEmptyScores();\n    }\n    this.saveScores();\n  }\n\n  getTopScore(duration) {\n    if (!['1min', '2min', '3min', '5min'].includes(duration)) {\n      return null;\n    }\n    return this.scores[duration][0] || null;\n  }\n\n  getPlayerBest(playerName, duration = null) {\n    if (!playerName) return null;\n    \n    const name = playerName.trim().toLowerCase();\n    \n    if (duration) {\n      if (!['1min', '2min', '3min', '5min'].includes(duration)) {\n        return null;\n      }\n      return this.scores[duration].find(s => \n        s.name.toLowerCase() === name\n      ) || null;\n    }\n    \n    // Get best across all durations\n    let best = null;\n    ['1min', '2min', '3min', '5min'].forEach(dur => {\n      const score = this.scores[dur].find(s => \n        s.name.toLowerCase() === name\n      );\n      if (score && (!best || score.score > best.score)) {\n        best = { ...score, duration: dur };\n      }\n    });\n    \n    return best;\n  }\n\n  exportData() {\n    return {\n      version: '1.0',\n      exportDate: new Date().toISOString(),\n      scores: this.getAllScores()\n    };\n  }\n\n  importData(data) {\n    if (!data || !data.scores) {\n      throw new Error('Invalid import data');\n    }\n    \n    this.scores = data.scores;\n    this.validateScores();\n    this.saveScores();\n  }\n\n  getStatistics() {\n    const stats = {};\n    \n    ['1min', '2min', '3min', '5min'].forEach(duration => {\n      const scores = this.scores[duration];\n      if (scores.length === 0) {\n        stats[duration] = {\n          totalGames: 0,\n          topScore: 0,\n          avgScore: 0,\n          avgAccuracy: 0\n        };\n      } else {\n        stats[duration] = {\n          totalGames: scores.length,\n          topScore: scores[0].score,\n          avgScore: Math.round(scores.reduce((sum, s) => sum + s.score, 0) / scores.length),\n          avgAccuracy: Math.round(scores.reduce((sum, s) => sum + s.accuracy, 0) / scores.length * 10) / 10\n        };\n      }\n    });\n    \n    return stats;\n  }\n}\n\n// Create singleton instance\nexport const highScores = new HighScores();","// Sprint Mode Module\n// Manages timed practice sessions with scoring and performance tracking\n\nimport { getRandomQuestion } from './questionGenerator.js';\nimport { highScores } from './highScores.js';\n\nexport const SPRINT_DURATIONS = {\n  '1min': 60000,\n  '2min': 120000,\n  '3min': 180000,\n  '5min': 300000\n};\n\nexport const SPRINT_STATES = {\n  IDLE: 'idle',\n  READY: 'ready',\n  RUNNING: 'running',\n  PAUSED: 'paused',\n  FINISHED: 'finished'\n};\n\nexport class SprintMode {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.state = SPRINT_STATES.IDLE;\n    this.duration = null;\n    this.startTime = null;\n    this.endTime = null;\n    this.pausedTime = 0;\n    this.pauseStartTime = null;\n    this.timeRemaining = 0;\n    \n    this.questions = [];\n    this.currentQuestion = null;\n    this.questionStartTime = null;\n    \n    this.score = 0;\n    this.correctAnswers = 0;\n    this.totalAnswers = 0;\n    this.currentStreak = 0;\n    this.bestStreak = 0;\n    \n    this.updateCallback = null;\n    this.finishCallback = null;\n    this.updateInterval = null;\n  }\n\n  configure(duration, options = {}) {\n    if (!SPRINT_DURATIONS[duration]) {\n      throw new Error(`Invalid duration: ${duration}`);\n    }\n    \n    if (this.state !== SPRINT_STATES.IDLE) {\n      throw new Error('Cannot configure sprint while active');\n    }\n    \n    this.duration = duration;\n    this.timeRemaining = SPRINT_DURATIONS[duration];\n    this.updateCallback = options.onUpdate || null;\n    this.finishCallback = options.onFinish || null;\n    this.state = SPRINT_STATES.READY;\n    \n    return true;\n  }\n\n  start() {\n    if (this.state !== SPRINT_STATES.READY) {\n      throw new Error('Sprint not configured or already running');\n    }\n    \n    this.state = SPRINT_STATES.RUNNING;\n    this.startTime = Date.now();\n    this.nextQuestion();\n    \n    // Start timer updates\n    this.updateInterval = setInterval(() => {\n      this.updateTimer();\n    }, 100); // Update every 100ms for smooth countdown\n    \n    return true;\n  }\n\n  pause() {\n    if (this.state !== SPRINT_STATES.RUNNING) {\n      return false;\n    }\n    \n    this.state = SPRINT_STATES.PAUSED;\n    this.pauseStartTime = Date.now();\n    \n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n    \n    return true;\n  }\n\n  resume() {\n    if (this.state !== SPRINT_STATES.PAUSED) {\n      return false;\n    }\n    \n    // Add paused duration to total paused time\n    this.pausedTime += Date.now() - this.pauseStartTime;\n    this.pauseStartTime = null;\n    this.state = SPRINT_STATES.RUNNING;\n    \n    // Restart timer updates\n    this.updateInterval = setInterval(() => {\n      this.updateTimer();\n    }, 100);\n    \n    return true;\n  }\n\n  stop() {\n    if (this.state === SPRINT_STATES.IDLE) {\n      return false;\n    }\n\n    // Clean up\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    // Calculate final time if was running\n    const wasRunning = this.state === SPRINT_STATES.RUNNING;\n    if (wasRunning) {\n      this.endTime = Date.now();\n    }\n\n    this.state = SPRINT_STATES.FINISHED;\n\n    // Trigger finish callback if sprint was active\n    if (wasRunning && this.finishCallback) {\n      this.finishCallback(this.getResults());\n    }\n\n    return true;\n  }\n\n  nextQuestion() {\n    if (this.state !== SPRINT_STATES.RUNNING) {\n      return null;\n    }\n    \n    this.currentQuestion = getRandomQuestion();\n    this.questionStartTime = Date.now();\n    \n    return this.currentQuestion;\n  }\n\n  submitAnswer(userAnswer) {\n    if (this.state !== SPRINT_STATES.RUNNING || !this.currentQuestion) {\n      return null;\n    }\n    \n    const timeElapsed = Date.now() - this.questionStartTime;\n    const isCorrect = parseFloat(userAnswer) === this.currentQuestion.answer;\n    \n    // Record the question\n    const questionRecord = {\n      question: this.currentQuestion.question,\n      userAnswer: userAnswer,\n      correctAnswer: this.currentQuestion.answer,\n      isCorrect: isCorrect,\n      timeElapsed: timeElapsed,\n      type: this.currentQuestion.type\n    };\n    this.questions.push(questionRecord);\n    \n    // Update statistics\n    this.totalAnswers++;\n\n    if (isCorrect) {\n      this.correctAnswers++;\n      this.currentStreak++;\n      this.bestStreak = Math.max(this.bestStreak, this.currentStreak);\n      this.score += 1; // +1 for correct\n    } else {\n      this.currentStreak = 0;\n      this.score = Math.max(0, this.score - 1); // -1 for incorrect, but don't go below 0\n    }\n\n    return {\n      isCorrect: isCorrect,\n      correctAnswer: this.currentQuestion.answer,\n      points: isCorrect ? 1 : -1,\n      currentStreak: this.currentStreak,\n      score: this.score\n    };\n  }\n\n  updateTimer() {\n    if (this.state !== SPRINT_STATES.RUNNING) {\n      return;\n    }\n    \n    const now = Date.now();\n    const elapsed = now - this.startTime - this.pausedTime;\n    this.timeRemaining = Math.max(0, SPRINT_DURATIONS[this.duration] - elapsed);\n    \n    // Trigger update callback\n    if (this.updateCallback) {\n      this.updateCallback({\n        timeRemaining: this.timeRemaining,\n        score: this.score,\n        questionsAnswered: this.totalAnswers\n      });\n    }\n    \n    // Check if time is up\n    if (this.timeRemaining <= 0) {\n      this.stop();\n    }\n  }\n\n  getTimeRemaining() {\n    return this.timeRemaining;\n  }\n\n  getFormattedTime() {\n    const totalSeconds = Math.ceil(this.timeRemaining / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  }\n\n  getProgress() {\n    if (!this.duration) return 0;\n    const totalTime = SPRINT_DURATIONS[this.duration];\n    return ((totalTime - this.timeRemaining) / totalTime) * 100;\n  }\n\n  getStatistics() {\n    const accuracy = this.totalAnswers > 0 \n      ? Math.round((this.correctAnswers / this.totalAnswers) * 100)\n      : 0;\n    \n    const avgTimePerQuestion = this.questions.length > 0\n      ? Math.round(this.questions.reduce((sum, q) => sum + q.timeElapsed, 0) / this.questions.length)\n      : 0;\n    \n    return {\n      score: this.score,\n      questionsAnswered: this.totalAnswers,\n      correctAnswers: this.correctAnswers,\n      accuracy: accuracy,\n      currentStreak: this.currentStreak,\n      bestStreak: this.bestStreak,\n      avgTimePerQuestion: avgTimePerQuestion,\n      timeElapsed: this.startTime ? \n        (this.endTime || Date.now()) - this.startTime - this.pausedTime : 0\n    };\n  }\n\n  getResults() {\n    if (this.state === SPRINT_STATES.IDLE) {\n      return null;\n    }\n    \n    const stats = this.getStatistics();\n    \n    return {\n      duration: this.duration,\n      score: stats.score,\n      questionsAnswered: stats.questionsAnswered,\n      correctAnswers: stats.correctAnswers,\n      accuracy: stats.accuracy,\n      bestStreak: stats.bestStreak,\n      avgTimePerQuestion: stats.avgTimePerQuestion,\n      timeElapsed: stats.timeElapsed,\n      questions: [...this.questions],\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  isHighScore() {\n    if (!this.duration || this.state === SPRINT_STATES.IDLE) {\n      return false;\n    }\n    return highScores.isHighScore(this.duration, this.score);\n  }\n\n  saveHighScore(playerName) {\n    if (!this.duration || !playerName || this.state === SPRINT_STATES.IDLE) {\n      return null;\n    }\n    \n    const stats = this.getStatistics();\n    return highScores.addScore(this.duration, {\n      name: playerName,\n      score: stats.score,\n      questionsAnswered: stats.questionsAnswered,\n      accuracy: stats.accuracy,\n      avgTimePerQuestion: stats.avgTimePerQuestion\n    });\n  }\n\n  getLeaderboard() {\n    if (!this.duration) {\n      return [];\n    }\n    return highScores.getScores(this.duration);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  isActive() {\n    return this.state === SPRINT_STATES.RUNNING || this.state === SPRINT_STATES.PAUSED;\n  }\n\n  canStart() {\n    return this.state === SPRINT_STATES.READY;\n  }\n\n  exportData() {\n    return {\n      state: this.state,\n      duration: this.duration,\n      statistics: this.getStatistics(),\n      results: this.getResults()\n    };\n  }\n}\n\n// Create singleton instance\nexport const sprintMode = new SprintMode();","// Sprint Controller Module\n// Manages Sprint Mode UI and integration with main game\n\nimport { sprintMode } from './sprintMode.js';\nimport { highScores } from './highScores.js';\nimport { UIController } from './ui.js';\n\nexport class SprintController {\n  constructor(uiController) {\n    this.ui = uiController || new UIController();\n    this.sprintMode = sprintMode;\n    this.isSprintActive = false;\n    this.selectedDuration = null;\n    \n    this.initializeElements();\n  }\n\n  initializeElements() {\n    const doc = (typeof document !== 'undefined') ? document : globalThis.document;\n    if (!doc) return;\n\n    // Sprint UI elements\n    this.sprintBtn = doc.getElementById('sprintBtn');\n    this.sprintSelector = doc.getElementById('sprintSelector');\n    this.cancelSprintBtn = doc.getElementById('cancelSprintBtn');\n    this.sprintTimerSection = doc.getElementById('sprintTimerSection');\n    this.sprintTime = doc.getElementById('sprintTime');\n    this.sprintScore = doc.getElementById('sprintScore');\n    this.sprintProgressBar = doc.getElementById('sprintProgressBar');\n    \n    // Sprint duration buttons\n    this.durationBtns = doc.querySelectorAll('.sprint-duration-btn');\n    \n    // Results modal elements\n    this.resultsModal = doc.getElementById('sprintResultsModal');\n    this.finalScore = doc.getElementById('finalScore');\n    this.finalQuestions = doc.getElementById('finalQuestions');\n    this.finalAccuracy = doc.getElementById('finalAccuracy');\n    this.finalStreak = doc.getElementById('finalStreak');\n    this.highScoreSection = doc.getElementById('highScoreSection');\n    this.playerNameInput = doc.getElementById('playerNameInput');\n    this.leaderboardList = doc.getElementById('leaderboardList');\n    this.playAgainBtn = doc.getElementById('playAgainBtn');\n    this.closeResultsBtn = doc.getElementById('closeResultsBtn');\n  }\n\n  showSprintSelector() {\n    if (this.sprintSelector) {\n      this.sprintSelector.style.display = 'block';\n    }\n  }\n\n  hideSprintSelector() {\n    if (this.sprintSelector) {\n      this.sprintSelector.style.display = 'none';\n    }\n  }\n\n  startSprint(duration) {\n    this.selectedDuration = duration;\n    this.isSprintActive = true;\n    \n    // Configure sprint with callbacks\n    this.sprintMode.configure(duration, {\n      onUpdate: (data) => this.updateSprintDisplay(data),\n      onFinish: (results) => this.handleSprintFinish(results)\n    });\n    \n    // Start the sprint\n    this.sprintMode.start();\n    \n    // Show sprint timer\n    if (this.sprintTimerSection) {\n      this.sprintTimerSection.style.display = 'flex';\n    }\n    \n    // Hide regular game stats\n    const statsSection = document.querySelector('.stats-section');\n    if (statsSection) {\n      statsSection.style.display = 'none';\n    }\n    \n    // Update button states\n    this.updateButtonStates();\n    \n    // Get first question\n    return this.sprintMode.currentQuestion;\n  }\n\n  updateSprintDisplay(data) {\n    // Update timer\n    if (this.sprintTime) {\n      this.sprintTime.textContent = this.sprintMode.getFormattedTime();\n    }\n    \n    // Update score\n    if (this.sprintScore) {\n      this.sprintScore.textContent = data.score;\n    }\n    \n    // Update progress bar\n    if (this.sprintProgressBar) {\n      const progress = this.sprintMode.getProgress();\n      this.sprintProgressBar.style.width = `${progress}%`;\n    }\n  }\n\n  handleSprintFinish(results) {\n    this.isSprintActive = false;\n    \n    // Hide sprint timer\n    if (this.sprintTimerSection) {\n      this.sprintTimerSection.style.display = 'none';\n    }\n    \n    // Show regular stats again\n    const statsSection = document.querySelector('.stats-section');\n    if (statsSection) {\n      statsSection.style.display = 'block';\n    }\n    \n    // Show results modal\n    this.showResults(results);\n  }\n\n  showResults(results) {\n    if (!this.resultsModal) return;\n    \n    // Update result values\n    if (this.finalScore) this.finalScore.textContent = results.score;\n    if (this.finalQuestions) this.finalQuestions.textContent = results.questionsAnswered;\n    if (this.finalAccuracy) this.finalAccuracy.textContent = `${results.accuracy}%`;\n    if (this.finalStreak) this.finalStreak.textContent = results.bestStreak;\n    \n    // Check if high score\n    const isHighScore = this.sprintMode.isHighScore();\n    if (this.highScoreSection) {\n      this.highScoreSection.style.display = isHighScore ? 'block' : 'none';\n      if (isHighScore && this.playerNameInput) {\n        this.playerNameInput.value = '';\n        this.playerNameInput.focus();\n      }\n    }\n    \n    // Update leaderboard\n    this.updateLeaderboard();\n    \n    // Show modal\n    this.resultsModal.style.display = 'block';\n  }\n\n  hideResults() {\n    if (this.resultsModal) {\n      this.resultsModal.style.display = 'none';\n    }\n  }\n\n  updateLeaderboard() {\n    if (!this.leaderboardList || !this.selectedDuration) return;\n    \n    const scores = this.sprintMode.getLeaderboard();\n    this.leaderboardList.innerHTML = '';\n    \n    if (scores.length === 0) {\n      this.leaderboardList.innerHTML = '<li>No scores yet!</li>';\n      return;\n    }\n    \n    scores.slice(0, 10).forEach((score, index) => {\n      const li = document.createElement('li');\n      li.innerHTML = `\n        <span>${index + 1}. ${score.name}</span>\n        <span>${score.score} pts</span>\n      `;\n      this.leaderboardList.appendChild(li);\n    });\n  }\n\n  saveHighScore() {\n    if (!this.playerNameInput || !this.playerNameInput.value.trim()) {\n      return false;\n    }\n    \n    const playerName = this.playerNameInput.value.trim();\n    const rank = this.sprintMode.saveHighScore(playerName);\n    \n    if (rank) {\n      // Update leaderboard to show new score\n      this.updateLeaderboard();\n      \n      // Hide high score input\n      if (this.highScoreSection) {\n        this.highScoreSection.style.display = 'none';\n      }\n      \n      // Show success message\n      if (rank === 1) {\n        this.ui.showFeedback(true, null);\n        this.ui.feedback.textContent = '🏆 New #1 High Score!';\n      } else {\n        this.ui.showFeedback(true, null);\n        this.ui.feedback.textContent = `🎉 Ranked #${rank} on the leaderboard!`;\n      }\n    }\n    \n    return rank;\n  }\n\n  stopSprint() {\n    if (this.isSprintActive) {\n      this.sprintMode.stop();\n      this.isSprintActive = false;\n      \n      // Hide sprint timer\n      if (this.sprintTimerSection) {\n        this.sprintTimerSection.style.display = 'none';\n      }\n      \n      // Show regular stats\n      const statsSection = document.querySelector('.stats-section');\n      if (statsSection) {\n        statsSection.style.display = 'block';\n      }\n      \n      // Update button states\n      this.updateButtonStates();\n    }\n  }\n\n  resetSprint() {\n    this.sprintMode.reset();\n    this.isSprintActive = false;\n    this.selectedDuration = null;\n    \n    // Hide all sprint UI\n    this.hideSprintSelector();\n    this.hideResults();\n    \n    if (this.sprintTimerSection) {\n      this.sprintTimerSection.style.display = 'none';\n    }\n    \n    // Reset progress bar\n    if (this.sprintProgressBar) {\n      this.sprintProgressBar.style.width = '0%';\n    }\n  }\n\n  updateButtonStates() {\n    if (this.sprintBtn) {\n      this.sprintBtn.disabled = this.isSprintActive;\n    }\n  }\n\n  isActive() {\n    return this.isSprintActive;\n  }\n\n  getCurrentQuestion() {\n    return this.sprintMode.currentQuestion;\n  }\n\n  submitAnswer(userAnswer) {\n    return this.sprintMode.submitAnswer(userAnswer);\n  }\n\n  nextQuestion() {\n    return this.sprintMode.nextQuestion();\n  }\n\n  clearCurrentDurationScores() {\n    if (this.selectedDuration) {\n      highScores.clearScores(this.selectedDuration);\n      this.updateLeaderboard();\n\n      // Show feedback\n      if (this.ui && this.ui.feedback) {\n        this.ui.showFeedback(true, null);\n        this.ui.feedback.textContent = 'High scores cleared!';\n      }\n    }\n  }\n}","// Main App Orchestration\n// Ties together all modules to create the complete game\n\nimport { getRandomQuestion } from './questionGenerator.js';\nimport { gameSession } from './gameSession.js';\nimport { UIController } from './ui.js';\nimport { SprintController } from './sprintController.js';\n\nclass MathFluencyGame {\n  constructor() {\n    this.ui = new UIController();\n    this.session = gameSession;\n    this.sprint = new SprintController(this.ui);\n    this.currentQuestion = null;\n    this.isWaitingForNext = false;\n    this.mode = 'practice'; // 'practice' or 'sprint'\n\n    this.initializeEventListeners();\n  }\n\n  initializeEventListeners() {\n    // Start/Next button\n    this.ui.on(this.ui.startBtn, 'click', () => this.handleStartNext());\n\n    // Reset button\n    this.ui.on(this.ui.resetBtn, 'click', () => this.handleReset());\n\n    // Answer submission - use keydown instead of keypress for Enter key detection\n    // Note: keypress doesn't fire for Enter in number inputs in modern browsers\n    this.ui.on(this.ui.answerInput, 'keydown', (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault(); // Prevent form submission\n        this.handleAnswerSubmit();\n      }\n    });\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      // Escape to reset\n      if (e.key === 'Escape') {\n        this.handleReset();\n      }\n\n      // Space for next question (when input not focused)\n      if (e.key === ' ' && !this.ui.isAnswerFocused()) {\n        e.preventDefault();\n        this.handleStartNext();\n      }\n\n      // Show help with ?\n      if (e.key === '?' && !this.ui.isAnswerFocused()) {\n        this.ui.showKeyboardShortcuts();\n      }\n    });\n\n    // Note: Enter prevention is already handled in the answer submission handler above\n\n    // Sprint Mode event listeners\n    this.initializeSprintListeners();\n  }\n\n  initializeSprintListeners() {\n    // Sprint button\n    const sprintBtn = document.getElementById('sprintBtn');\n    if (sprintBtn) {\n      sprintBtn.addEventListener('click', () => this.showSprintSelector());\n    }\n\n    // Cancel sprint selector\n    const cancelBtn = document.getElementById('cancelSprintBtn');\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', () => this.hideSprintSelector());\n    }\n\n    // Sprint duration buttons\n    const durationBtns = document.querySelectorAll('.sprint-duration-btn');\n    durationBtns.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const duration = e.target.dataset.duration;\n        this.startSprintMode(duration);\n      });\n    });\n\n    // Results modal buttons\n    const playAgainBtn = document.getElementById('playAgainBtn');\n    if (playAgainBtn) {\n      playAgainBtn.addEventListener('click', () => {\n        this.sprint.hideResults();\n        const duration = this.sprint.selectedDuration;\n        this.sprint.resetSprint();\n        this.startSprintMode(duration);\n      });\n    }\n\n    const closeResultsBtn = document.getElementById('closeResultsBtn');\n    if (closeResultsBtn) {\n      closeResultsBtn.addEventListener('click', () => {\n        this.sprint.hideResults();\n        this.sprint.resetSprint();\n        this.mode = 'practice';\n        this.ui.reset();\n      });\n    }\n\n    // Player name input for high scores\n    const playerNameInput = document.getElementById('playerNameInput');\n    if (playerNameInput) {\n      playerNameInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          this.sprint.saveHighScore();\n        }\n      });\n    }\n\n    // Clear scores button\n    const clearScoresBtn = document.getElementById('clearScoresBtn');\n    if (clearScoresBtn) {\n      clearScoresBtn.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear all high scores for this duration?')) {\n          this.sprint.clearCurrentDurationScores();\n        }\n      });\n    }\n  }\n\n  showSprintSelector() {\n    // Pause regular game if active\n    if (this.session.isSessionActive()) {\n      this.session.pause();\n    }\n    this.sprint.showSprintSelector();\n  }\n\n  hideSprintSelector() {\n    this.sprint.hideSprintSelector();\n    // Resume regular game if was paused\n    if (this.session.isPaused()) {\n      this.session.resume();\n    }\n  }\n\n  startSprintMode(duration) {\n    // End regular session if active\n    if (this.session.isSessionActive()) {\n      this.session.end();\n    }\n\n    // Hide sprint selector\n    this.sprint.hideSprintSelector();\n\n    // Switch to sprint mode\n    this.mode = 'sprint';\n    this.isWaitingForNext = false;\n\n    // Start sprint\n    const question = this.sprint.startSprint(duration);\n    this.currentQuestion = question;\n\n    // Display first question\n    this.ui.displayQuestion(question);\n    this.ui.setGameActive(true);\n\n    // Update UI\n    this.ui.startBtn.textContent = 'Sprint Active';\n    this.ui.startBtn.disabled = true;\n    this.ui.resetBtn.textContent = 'Stop Sprint';\n  }\n\n  handleStartNext() {\n    if (!this.session.isSessionActive()) {\n      this.startGame();\n    } else {\n      this.nextQuestion();\n    }\n  }\n\n  startGame() {\n    // Start new session\n    this.session.start();\n    this.ui.setGameActive(true);\n    this.isWaitingForNext = false;\n\n    // Load first question\n    this.nextQuestion();\n  }\n\n  nextQuestion() {\n    // Don't clear feedback here - let it persist from previous answer\n    // this.ui.clearFeedback();\n    this.ui.clearAnswer();\n\n    // Generate new question\n    this.currentQuestion = getRandomQuestion();\n\n    // Start timing\n    this.session.startQuestion(this.currentQuestion);\n\n    // Display question\n    this.ui.displayQuestion(this.currentQuestion);\n\n    // Update statistics\n    this.updateStats();\n\n    this.isWaitingForNext = false;\n  }\n\n  handleAnswerSubmit() {\n    // Ignore if no current question or already waiting for next\n    if (!this.currentQuestion || this.isWaitingForNext) {\n      return;\n    }\n\n    const userAnswer = this.ui.getAnswer();\n\n    // Ignore empty answers\n    if (!userAnswer) {\n      return;\n    }\n\n    let result;\n\n    // Handle based on mode\n    if (this.mode === 'sprint') {\n      result = this.sprint.submitAnswer(userAnswer);\n      if (!result) return;\n\n      // Show feedback\n      this.ui.showFeedback(result.isCorrect, result.correctAnswer);\n\n      // Auto-advance to next question\n      setTimeout(() => {\n        if (this.sprint.isActive()) {\n          const nextQ = this.sprint.nextQuestion();\n          if (nextQ) {\n            this.currentQuestion = nextQ;\n            this.ui.displayQuestion(nextQ);\n          }\n        }\n      }, 100);\n    } else {\n      // Regular practice mode\n      result = this.session.submitAnswer(userAnswer);\n\n      // Show feedback\n      this.ui.showFeedback(result.isCorrect, result.correctAnswer);\n\n      // Update statistics\n      this.updateStats();\n\n      // Set flag to prevent multiple submissions\n      this.isWaitingForNext = true;\n\n      // Auto-advance to next question after minimal delay\n      setTimeout(() => {\n        if (this.session.isSessionActive()) {\n          this.nextQuestion();\n        }\n      }, 100);\n    }\n  }\n\n  handleReset() {\n    // Handle Sprint Mode reset\n    if (this.mode === 'sprint') {\n      if (confirm('Stop the current sprint?')) {\n        this.sprint.stopSprint();\n        this.mode = 'practice';\n        this.resetGame();\n        this.ui.resetBtn.textContent = 'Reset Session';\n      }\n      return;\n    }\n\n    // Regular practice mode reset\n    if (this.session.questions.length > 5) {\n      const stats = this.session.getStatistics();\n      if (!confirm(`Reset session? You've answered ${stats.totalQuestions} questions with ${stats.accuracy}% accuracy.`)) {\n        return;\n      }\n    }\n\n    // Get final stats before reset\n    const finalStats = this.session.end();\n\n    // Show summary if there were questions\n    if (finalStats.totalQuestions > 0) {\n      this.ui.showSessionSummary(finalStats);\n\n      // Reset after delay\n      setTimeout(() => {\n        this.resetGame();\n      }, 3000);\n    } else {\n      this.resetGame();\n    }\n  }\n\n  resetGame() {\n    // Reset session\n    this.session.reset();\n\n    // Reset UI\n    this.ui.reset();\n\n    // Clear current question\n    this.currentQuestion = null;\n    this.isWaitingForNext = false;\n  }\n\n  updateStats() {\n    const stats = this.session.getStatistics();\n    this.ui.updateStatistics(stats);\n  }\n\n  // Performance monitoring\n  checkPerformance() {\n    const trend = this.session.getPerformanceTrend();\n\n    if (trend) {\n      if (trend.trend === 'improving' && trend.recentAccuracy > 90) {\n        this.ui.showFeedback(true, null);\n        this.ui.feedback.textContent = '🚀 Great progress! You\\'re on fire!';\n      } else if (trend.trend === 'declining' && trend.recentAccuracy < 50) {\n        this.ui.feedback.textContent = '💡 Take your time, focus on accuracy';\n        this.ui.feedback.className = 'feedback';\n      }\n    }\n  }\n\n  // Save/Load functionality (for future enhancement)\n  saveProgress() {\n    const data = this.session.exportData();\n    localStorage.setItem('mathFluencyProgress', JSON.stringify(data));\n  }\n\n  loadProgress() {\n    const saved = localStorage.getItem('mathFluencyProgress');\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        this.session.importData(data);\n        this.updateStats();\n        this.ui.setGameActive(this.session.isSessionActive());\n        return true;\n      } catch (e) {\n        console.error('Failed to load progress:', e);\n      }\n    }\n    return false;\n  }\n}\n\n// Initialize game when DOM is ready\nfunction initGame() {\n  // Remove any existing demo code\n  const demoScript = document.querySelector('script[type=\"module\"]:not([src])');\n  if (demoScript) {\n    demoScript.remove();\n  }\n\n  // Create game instance\n  const game = new MathFluencyGame();\n\n  // Expose to window for debugging\n  window.game = game;\n\n  // Add developer utilities\n  window.clearAllScores = async () => {\n    if (confirm('This will clear ALL high scores across all durations. Are you sure?')) {\n      const { highScores } = await import('./highScores.js');\n      highScores.clearScores(); // Clear all durations\n      console.log('All high scores cleared!');\n      return 'All scores cleared';\n    }\n    return 'Cancelled';\n  };\n\n  console.log('Developer commands available:');\n  console.log('- clearAllScores() : Clear all high scores');\n  console.log('- game : Access game instance');\n\n  // Try to load saved progress\n  if (game.loadProgress()) {\n    console.log('Previous session restored');\n  }\n\n  // Save progress periodically\n  setInterval(() => {\n    if (game.session.isSessionActive()) {\n      game.saveProgress();\n    }\n  }, 30000); // Every 30 seconds\n\n  // Save on page unload\n  window.addEventListener('beforeunload', () => {\n    if (game.session.isSessionActive()) {\n      game.saveProgress();\n    }\n  });\n\n  console.log('Math Royale initialized! Press Start to begin.');\n}\n\n// Start when DOM is loaded\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initGame);\n} else {\n  initGame();\n}\n\nexport { MathFluencyGame };"],"file":"assets/index-DvmKvU-A.js"}